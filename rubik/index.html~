<!DOCTYPE html>

<html lang="en">
	<head>
		<title>A Rubik's cube solution that is easy to memorize</title>

		<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
		<!-- Latest compiled and minified CSS -->
		<link rel="stylesheet" href="CedCube/css/bootstrap.min.css">
		<!-- Optional theme -->
		<link rel="stylesheet" href="CedCube/css/bootstrap-theme.min.css">
		<!-- Latest compiled and minified JavaScript -->
		<script src="CedCube/js/bootstrap.min.js"></script>

		<link rel="stylesheet" type="text/css" href="CedCube/css/style.css">
	  	<script src="CedCube/js-lib/three.min.js"></script>
		<script src="CedCube/js-lib/OrbitControls.js"></script>
		<script src="CedCube/js/CedCube.js"></script>
		<script>
		    window.onload = function() {
		        run();
		    };
	    </script>

	</head>
	<body>

<div class="page-header">
	<h1 class="text-center">A solution for the Rubik's cube that's easy to memorize</h1>

	<p class="text-center font-size-medium">
		<a href="http://beust.com">Cedric Beust</a> (<a href="http://twitter.com/cbeust">@cbeust</a>)
	</p>
	<p class="text-center font-size-small">
		January 2003
	</p>
	<table class="cc-table">
		<tr>
			<td>
				<div id="header" class="CedCube"
			    	cc-params="formula=RF'R'F RF'R'F,startString=rryrrwbrgrgggggwww oooooogoo bbbbbbbbw yyyyyyyyg rgrwwrwwo">
				</div>
			</td>
		</tr>
	</table>
</div>


<div class="container-fluid">
	<div class="row">

		<div class="col-sm-1">
		</div>
		<div class="col-sm-10">

<em>Safari users: if you're not seeing a cube above, you need to <a href="https://discussions.apple.com/thread/3300585?start=0&tstart=0">enable WebGL</a> in your browser.</em>

<h2>Foreword</h2>

A couple of weeks ago at a party, I came in contact with a Rubik's cube.  It's not that I hadn't seen one in a long time (my very own faithful cube has been in my possession for over twenty years now), but for some reason, playing with that one revived in me the will to solve it again.

<p>

I used to be crazy about the Rubik's cube, back in high school something like twenty years ago.  We were running contests and I was able to solve it in a minute overall.  Not stellar, but decent.  There was one major difference, though:  back then, we didn't have the Internet.  I had gotten my solution in various magazines and I had added my own algorithms in an attempt to speed up the process and beat my classmates.

<p>

When I looked it up on the Internet, I wasn't really surprised to find a wealth of information.  Much more than anything I had ever read on the topic.  There are all kinds of methodologies out there and a lot of people who took the time to put up Web pages have used various ways to reach their own solution, often assisted by a computer (see the links section below for details).

<p>

But at this point, I'm not really interested in speed cubing.  I just want a solution that's easy to memorize so I can revive the old feeling of beating the cube without reading a paper.  None of the solutions I read were really aimed at easy memorization, so I created this page.

<p>

You will find out that the first half of this solution is simple common sense and even though I took the trouble of enumerating each algorithm for the sake of completeness, you only need to memorize the algorithms explained in the second part of this solution.  I am confident that the first part will stick with you since I remembered how to get that part myself even after twenty years of inactivity.

<p>

Therefore, I split this solution in two parts:  the easy one (in which you build the first two layers except for one edge) and the harder one, where you complete the cube using more complex algorithms that you need to learn by heart.

<p>

As as side note, I focused on providing the algorithms that you absolutely need to know in order to finish the cube (a total of eight algorithms).  For every step of the second part, you can find on the Web similar algorithms that will solve this stage when the cubies are in different locations.  I didn't include them in this solution so you are not overwhelmed or discouraged by the amount of what you need to learn, but once you are familiar with the algorithms below to the point where you no longer need to think, I strongly recommend you follow the links I provide at the end of this page:  they will teach you more specialized algorithms that will greatly speed up your cube solving.

<p>

As a final thought, it is just amazing how finger memory works.  It took me a couple of hours of practice to have this solution totally memorized in my fingers.  No more thinking in terms of "U" and "R prime", it just comes automatically.  Give it a try, practice these algorithms over and over (even on an unmade cube), and you will learn it in no time.
Notation

<p>

I am using the popular notation that I found pretty much everywhere.  Each side is represented by its initial:  Front, Back, Left, Right, Up, Down.  A letter by itself (e.g. "R") means "turn this side clockwise".  A letter followed by a prime (e.g. "F'") means "turn this side counter-clockwise.  Finally, a letter followed by 2 (e.g. "L2", it should really be a square, not a 2) means "turn this side 180 degrees".  If you have any doubts, the applets will clear up any confusion you might feel.

<p>

One last note before we begin:  I shamelessly stole the slick cube applet from Lars, whose Web site you can find in the links section.  Be sure to check out his Rubik's page, there is a lot of information contained there.

<!--

<h2>A note on the animations</h2>

The cubes displayed below can be moved around (left click and move the mouse around). The animations come from an HTML 5 library I wrote called <a href="http://github.com/cbeust/cedCube">CedCube</a>. Embedding cubes in your own page is very easy and explained on the <a href="http://beust.com/CedCube">CedCube page</a>.

<p>
	
<p>

Let's get started.

-->


<h2>Phase one</h2>

This is the easy part where you could pretty much guess all these moves by yourself.  Before you can start, you need to pick a side and place the edges correctly so that the cube shows a cross.  I will skip this part because it's trivial, but if you disagree, please let me know and I will add a step-by-step description of how to get there.

<h3>
1a) Position three corners
</h3>

<p>

All four edges are in place, now we want to position three corners so that we end up with the first layer finished except for one corner.  Move a corner under its final position and apply one of the three following algorithms:

<table class="cc-table">
	<tr>
		<td>
			<div id="1a-0" class="CedCube"
		    	cc-params="formula=FD'F',startString=........w ......... ......... ......... .w.www.w. .........">
			</div>
		</td>
		<td>
			<div id="1a-1" class="CedCube"
		    	cc-params="formula=R'DR,startString=......... ......w.. ......... ......... .w.www.w. .........">
			</div>
		</td>
		<td>
			<div id="1a-2" class="CedCube"
		    	cc-params="formula=R'DDR D' R'DR,startString=......... ......... ......... ......... .w.www.w. ..w......">
			</div>
		</td>
	</tr>
</table>

<p>
Note that even though the third algorithm looks intimidating, it's actually quite 
simple: we can't place the corner directly in its final location if it's 
facing downwards, so we move the cube in order to reach one of the first two 
scenarios, which we can then solve.
</p>

<p>
At the end of this step, your cube will look like this:

</p>

<table class="cc-table">
	<tr>
		<td>
			<div id="1a-3" class="CedCube"
		    	cc-params="startString=......... ......... ......... ......... wwwwwwww. .........">
			</div>
		</td>
	</tr>
</table>

We will use this missing corner (also called "working corner") to install the second layer.

<h3>
1b) Position three edges in the middle layer
</h3>

Our goal in this phase is to bring the cube with the first two layers complete except for one corner and one edge:

<table class="cc-table">
	<tr>
		<td>
			<div id="1b-0" class="CedCube"
		    	cc-params="startString=oo.oo.... .gg.gg... ......... ......... wwwwwwww. .........">
			</div>
		</td>
	</tr>
</table>

To achieve this, we are going to position three middle edge cubies using the 
working corner. For each edge, you have two possible configurations. 
Bring the working corner on top of the edge you want to install, and use one of 
the two following algorithms:

<table class="cc-table">
	<tr>
		<td>
			<div id="1b-1" class="CedCube"
		    	cc-params="formula=R'D'R,startString=oo.oo..g. .gg.gg... ......... ......... wwwwwwww. .o.......">
			</div>
		</td>
		<td>
			<div id="1b-2" class="CedCube"
		    	cc-params="formula=FDF',startString=oo.oo.... .gg.gg.o. ......... ......... wwwwwwww. .....g...">
			</div>
		</td>
	</tr>
</table>

Repeat these algorithms for the three cubies until you reach the point where the two layers are finished except for one corner and the edge below it. Then use the algorithms shown in 1a) to position the final corner of the first layer.  Your cube should now look like this:

<table class="cc-table">
	<tr>
		<td>
			<div id="1b-3" class="CedCube"
		    	cc-params="startString=ooooo.... ggg.gg... ......... ......... wwwwwwwww .........">
			</div>
		</td>
	</tr>
</table>

 So far, all the algorithms were pretty straightforward and you can even reconstitute them yourself, but you are going to have to memorize what follows from this point on.

<h2>
	Phase 2
</h2>

<h3>
2a) Finish the middle layer
</h3>

Turn the cube upside down (yellow face up, white face down) and bring the missing edge near its final position. Depending on where the missing edge is, use one of the two following algorithms:

<table class="cc-table">
	<tr>
		<td>
			<div id="2a-0" class="CedCube"
		    	cc-params="formula=URU'R' U'F'UF,startString=.g.gg.ggg. ...ooooo ......... ......... ....y..o. .........">
			</div>
		</td>
		<td>
			<div id="2a-1" class="CedCube"
		    	cc-params="formula=U'F'UF URU'R',startString=...gg.ggg .o..ooooo ......... ......... ....yg... .........">
			</div>
		</td>
	</tr>
</table>

<h3>
2b) Orient the edges on the last layer
</h3>

Now we only have one layer left.  The first step is to orient all four edges correctly.  The following algorithms take care of orienting pairs of edges, either adjacent, or opposed:

<table class="cc-table">
	<tr>
		<td>
			<div id="2b-0" class="CedCube"
		    	cc-params="formula=FUR U'R'F',startString=.y.gggggg .y.oooooo ......... ......... .y.yy.... ......">
			</div>
		</td>
		<td>
			<div id="2b-1" class="CedCube"
		    	cc-params="formula=FRU R'U'F',startString=.y.gggggg ...oooooo .y....... ......... ...yyy... .........">
			</div>
		</td>
	</tr>
</table>

<h3>
	2c) Position the edges
</h3>

Now that the edges are oriented correctly, we need to put them in their final location.  The following algorithm switches the two edges opposed to you (you might want to move the cube around so you can see the cubies in the back, press the mouse button and move your mouse around):

<table class="cc-table">
	<tr>
		<td>
			<div id="2c-0" class="CedCube"
		    	cc-params="formula=UR'UUR UR'UR,startString=.g.gggggg .o.oooooo .r..b.... .b..r.... .y.yyy.y. .........">
			</div>
		</td>
	</tr>
</table>

<h3>
	2d) Position the corners
</h3>

We are done with the edges.  Next, we need to position the corners to their final position (not necessarily well oriented).  The following algorithm leaves the northwest corner untouched but rotates the other three counter-clockwise.  You might have to make this algorithm several times until you have placed all four corners.

<table class="cc-table">
	<tr>
		<td>
			<div id="2d-0" class="CedCube"
		    	cc-params="formula=ULU'R' UL'U'R,startString=ybybbbbbb rrorrrrrr bgggggggg ooroooooo yyyyyybyg .........">
			</div>
		</td>
	</tr>
</table>

<h3>
	2e) Orient the corners
</h3>

To orient the corners, you only need to memorize one formula: R F' R' F.

Bring the corner to orient in the top right position and run this formula over and over again until the corner has the right orientation. Then move the upper layer to bring the next corner in the top right position and repeat. 

<p>

In the cube below, we need to use this formula four times for the first corner. Then we bring the next corner in position with a <tt>U</tt> and we play the formula twice. Then we cancel the <tt>U</tt> with a <tt>U'</tt>

<table class="cc-table">
	<tr>
		<td>
			<div id="2e-0" class="CedCube"
		    	cc-params="formula=RF'R'F RF'R'F RF'R'F RF'R'F U RF'R'F RF'R'F U',startString=ooboooooo ybybbbbbb brrrrrrrr gggggggggyyryyyyyo wwwwwwwww">
			</div>
		</td>
	</tr>
</table>

<h2>
Other Rubik's cube links
</h2>
<ul>
  <li>The <a href="http://www.puzzlesolver.com/seqential/rubik/cube/index.shtml">
  Puzzle Solver Web site</a> is where I took most of the phase two algorithms.&nbsp; 
  Their first phase differs slightly from mine, but you should check it out if 
  you want to speed up your cube resolution as it supplies additional algorithms 
  to solve some of the stages.
</li>
  <li><a href="http://lar5.com/cube/">Lars</a> a speed cubist who created a layered solution that  uses different means and algorithms to solve 
  the two layers.&nbsp; I found his solution a little harder to follow because 
  there are a lot of assumptions in-between the stages, but once you understand 
  it, you will no doubt cut down your cube solving time dramatically.
</li>
  <li>The <a href="http://kociemba.org/cube.htm">Cube Explorer</a> 
  is an amazing program that will solve any given Rubik's cube in an average of 
  twenty moves (most of the time, less than that).&nbsp; It is in average just 
  three moves above the theoretical optimal solution and it uses brute forces to 
  reach that result.&nbsp; Amazing.</li>
  <li><a href="http://www.ws.binghamton.edu/fridrich/system.html">Jessica Fridrich's page</a> is the ultimate resource for speed cubing.  A lot of formulas to remember, but if you can pull it off, your times will probably drop below the thirty second barrier.</li>
</ul>
<p>

		</div>
	</div>
</div>



	</body>
</html>

